// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * XArcade XInput Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:32123/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 *
 * @export
 * @interface BasicError
 */
export interface BasicError {
    /**
     * Error message
     * @type {string}
     * @memberof BasicError
     */
    error?: string;
}

/**
 *
 * @export
 * @interface Body
 */
export interface Body {
    /**
     * Mapping name
     * @type {string}
     * @memberof Body
     */
    name?: string;
    /**
     * JSON contents of mapping
     * @type {string}
     * @memberof Body
     */
    mapping?: string;
}

/**
 *
 * @export
 * @interface Body1
 */
export interface Body1 {
    /**
     *
     * @type {string}
     * @memberof Body1
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Body1
     */
    newName?: string;
}

/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    currentMapping?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof InlineResponse200
     */
    mappings?: { [key: string]: string; };
}

/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse2001
     */
    isControllerRunning?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse2001
     */
    isKeyboardRunning?: boolean;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2001
     */
    hostname?: string;
}


/**
 * ControllerApi - fetch parameter creator
 * @export
 */
export const ControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add fake controllers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controllerStartPost(options: any = {}): FetchArgs {
            const localVarPath = `/controller/start`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Remove fake controllers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controllerStopPost(options: any = {}): FetchArgs {
            const localVarPath = `/controller/stop`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ControllerApi - functional programming interface
 * @export
 */
export const ControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add fake controllers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controllerStartPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ControllerApiFetchParamCreator(configuration).controllerStartPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Remove fake controllers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controllerStopPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ControllerApiFetchParamCreator(configuration).controllerStopPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ControllerApi - factory interface
 * @export
 */
export const ControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Add fake controllers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controllerStartPost(options?: any) {
            return ControllerApiFp(configuration).controllerStartPost(options)(fetch, basePath);
        },
        /**
         *
         * @summary Remove fake controllers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controllerStopPost(options?: any) {
            return ControllerApiFp(configuration).controllerStopPost(options)(fetch, basePath);
        },
    };
};

/**
 * ControllerApi - object-oriented interface
 * @export
 * @class ControllerApi
 * @extends {BaseAPI}
 */
export class ControllerApi extends BaseAPI {
    /**
     *
     * @summary Add fake controllers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    public controllerStartPost(options?: any) {
        return ControllerApiFp(this.configuration).controllerStartPost(options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Remove fake controllers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    public controllerStopPost(options?: any) {
        return ControllerApiFp(this.configuration).controllerStopPost(options)(this.fetch, this.basePath);
    }

}

/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get running status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet(options: any = {}): FetchArgs {
            const localVarPath = `/status`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get running status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).statusGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Get running status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet(options?: any) {
            return DefaultApiFp(configuration).statusGet(options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Get running status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public statusGet(options?: any) {
        return DefaultApiFp(this.configuration).statusGet(options)(this.fetch, this.basePath);
    }

}

/**
 * KeyboardApi - fetch parameter creator
 * @export
 */
export const KeyboardApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Change mapping
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingCurrentPost(body?: string, options: any = {}): FetchArgs {
            const localVarPath = `/keyboard/mapping/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a mapping
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingDelete(body?: string, options: any = {}): FetchArgs {
            const localVarPath = `/keyboard/mapping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get keyboard mapping list and status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingGet(options: any = {}): FetchArgs {
            const localVarPath = `/keyboard/mapping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a mapping
         * @param {Body} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingPost(body?: Body, options: any = {}): FetchArgs {
            const localVarPath = `/keyboard/mapping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Rename a mapping
         * @param {Body1} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingRenamePost(body?: Body1, options: any = {}): FetchArgs {
            const localVarPath = `/keyboard/mapping/rename`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");
            // debugger

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Start watching keyboard for input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardStartPost(options: any = {}): FetchArgs {
            const localVarPath = `/keyboard/start`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Stop watching keyboard for input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardStopPost(options: any = {}): FetchArgs {
            const localVarPath = `/keyboard/stop`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeyboardApi - functional programming interface
 * @export
 */
export const KeyboardApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Change mapping
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingCurrentPost(body?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = KeyboardApiFetchParamCreator(configuration).keyboardMappingCurrentPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete a mapping
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingDelete(body?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = KeyboardApiFetchParamCreator(configuration).keyboardMappingDelete(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get keyboard mapping list and status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = KeyboardApiFetchParamCreator(configuration).keyboardMappingGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update a mapping
         * @param {Body} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingPost(body?: Body, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = KeyboardApiFetchParamCreator(configuration).keyboardMappingPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Rename a mapping
         * @param {Body1} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingRenamePost(body?: Body1, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = KeyboardApiFetchParamCreator(configuration).keyboardMappingRenamePost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Start watching keyboard for input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardStartPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = KeyboardApiFetchParamCreator(configuration).keyboardStartPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Stop watching keyboard for input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardStopPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = KeyboardApiFetchParamCreator(configuration).keyboardStopPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * KeyboardApi - factory interface
 * @export
 */
export const KeyboardApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Change mapping
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingCurrentPost(body?: string, options?: any) {
            return KeyboardApiFp(configuration).keyboardMappingCurrentPost(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete a mapping
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingDelete(body?: string, options?: any) {
            return KeyboardApiFp(configuration).keyboardMappingDelete(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get keyboard mapping list and status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingGet(options?: any) {
            return KeyboardApiFp(configuration).keyboardMappingGet(options)(fetch, basePath);
        },
        /**
         *
         * @summary Update a mapping
         * @param {Body} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingPost(body?: Body, options?: any) {
            return KeyboardApiFp(configuration).keyboardMappingPost(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Rename a mapping
         * @param {Body1} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMappingRenamePost(body?: Body1, options?: any) {
            return KeyboardApiFp(configuration).keyboardMappingRenamePost(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Start watching keyboard for input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardStartPost(options?: any) {
            return KeyboardApiFp(configuration).keyboardStartPost(options)(fetch, basePath);
        },
        /**
         *
         * @summary Stop watching keyboard for input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardStopPost(options?: any) {
            return KeyboardApiFp(configuration).keyboardStopPost(options)(fetch, basePath);
        },
    };
};

/**
 * KeyboardApi - object-oriented interface
 * @export
 * @class KeyboardApi
 * @extends {BaseAPI}
 */
export class KeyboardApi extends BaseAPI {
    /**
     *
     * @summary Change mapping
     * @param {} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyboardApi
     */
    public keyboardMappingCurrentPost(body?: string, options?: any) {
        return KeyboardApiFp(this.configuration).keyboardMappingCurrentPost(body, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Delete a mapping
     * @param {} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyboardApi
     */
    public keyboardMappingDelete(body?: string, options?: any) {
        return KeyboardApiFp(this.configuration).keyboardMappingDelete(body, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Get keyboard mapping list and status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyboardApi
     */
    public keyboardMappingGet(options?: any) {
        return KeyboardApiFp(this.configuration).keyboardMappingGet(options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Update a mapping
     * @param {} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyboardApi
     */
    public keyboardMappingPost(body?: Body, options?: any) {
        return KeyboardApiFp(this.configuration).keyboardMappingPost(body, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Rename a mapping
     * @param {} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyboardApi
     */
    public keyboardMappingRenamePost(body?: Body1, options?: any) {
        return KeyboardApiFp(this.configuration).keyboardMappingRenamePost(body, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Start watching keyboard for input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyboardApi
     */
    public keyboardStartPost(options?: any) {
        return KeyboardApiFp(this.configuration).keyboardStartPost(options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Stop watching keyboard for input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyboardApi
     */
    public keyboardStopPost(options?: any) {
        return KeyboardApiFp(this.configuration).keyboardStopPost(options)(this.fetch, this.basePath);
    }

}

